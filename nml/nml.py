from string import *
import sys, codecs, getopt
from ast import *
from tokens import *
from parser import *
from grfstrings import *
from generic import ScriptError
from actions.sprite_count import SpriteCountAction
from actions.real_sprite import RealSpriteAction
from actions.action8 import Action8

# Build the lexer
import ply.lex as lex
lexer = lex.lex()

def p_error(p):
    if p == None: print "Unexpected EOF"
    else:
        print p
        print "Syntax error at '%s', line %d" % (p.value, p.lineno)
    sys.exit(2)

import ply.yacc as yacc
parser = yacc.yacc(debug=True)

def usage():
    print "Usage: "+sys.argv[0]+" [<options>] <filenames>"
    print """
    where <filenames> are one or more nml files to parse and available options are
    -h, --help: show this help text
    Mind that you must not swap options and arguments. Options MUST go first.
    """

_debug = 0

def main(argv):
    global _debug
    _debug = 0
    retval = 0
    
    try:                  
        opts, args = getopt.getopt(argv, "hd", ["help","debug"])
    except getopt.GetoptError:
        usage()
        sys.exit(2)
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage()
            sys.exit()
        elif opt in ("-d", "--debug"):
            _debug = 1
    
    read_extra_commands()
    read_lang_files()
    
    if not args:
        retval |= nml(sys.stdin, sys.stdout)
    for arg in args:
        if not os.access(arg, os.R_OK):
            print "Failed to open "+arg
            retval |= 2
        else:
            outputfilename = filename_output_from_input(arg)
            print outputfilename+": parsing "+arg
            input = codecs.open(arg, 'r', 'utf-8')
            output = codecs.open(outputfilename, 'w', 'utf-8')
            retval |= nml(input, output)
            output.close()
            input.close()
    sys.exit(retval)

def filename_output_from_input(name):
    return os.path.splitext(name)[0] + ".nfo"

def nml(inputfile, outputfile):
    script = inputfile.read().strip()
    if script == "":
        print "Empty input file"
        return 4
    try:
        result = parser.parse(script)
    except:
        print "Error while parsing input file"
        raise
        return 8
    
    if _debug > 0:
        print_script(result, 0)
    
    actions = []
    for block in result:
        actions.extend(block.get_action_list())
    
    outputfile.write(
'''// Automatically generated by GRFCODEC. Do not modify!
// (Info version 7)
// Escapes: 2+ = 71 = D= = DR 2- = 70 = D+ = DF 2< = 7= = D- = DC 2> = 7! = Du* = DM 2u< = 7< = D* = DnF 2u> = 7> = Du<< = DnC 2/ = 7G = D<< = DO 2% = 7g = D& 2u/ = 7gG = D| 2u% = 7GG = Du/ 2* = 7gg = D/ 2& = 7c = Du% 2| = 7C = D% 2^ 2sto = 2s 2rst = 2r 2+ 2ror = 2rot
// Format: spritenum pcxfile xpos ypos compression ysize xsize xrel yrel

''')
    has_action8 = False
    for i in range(len(actions) - 1, -1, -1):
        if isinstance(actions[i], Action2Var):
            actions[i].resolve_tmp_storage()
        elif isinstance(actions[i], Action8):
            has_action8 = True
    
    if has_action8:
        actions = [SpriteCountAction(len(actions))] + actions
    
    for action in actions:
        action.prepare_output()
    sprite_num = 0
    for action in actions:
        outputfile.write(str(sprite_num) + " ")
        if not isinstance(action, RealSpriteAction): outputfile.write("* ")
        action.write(outputfile)
        sprite_num += 1
    
    return 0

if __name__ == "__main__":
    main(sys.argv[1:])
