# -*- coding: utf-8 -*-
from generic import *
import codecs

class OutputNFO(object):
    def __init__(self, filename):
        self.sprite_num = 0
        self.file = codecs.open(filename, 'w', 'utf-8')
        self.file.write(
'''// Automatically generated by GRFCODEC. Do not modify!
// (Info version 7)
// Escapes: 2+ = 71 = D= = DR 2- = 70 = D+ = DF 2< = 7= = D- = DC 2> = 7! = Du* = DM 2u< = 7< = D* = DnF 2u> = 7> = Du<< = DnC 2/ = 7G = D<< = DO 2% = 7g = D& 2u/ = 7gG = D| 2u% = 7GG = Du/ 2* = 7gg = D/ 2& = 7c = Du% 2| = 7C = D% 2^ 2sto = 2s 2rst = 2r 2+ 2ror = 2rot
// Format: spritenum pcxfile xpos ypos compression ysize xsize xrel yrel

''')

    def close(self):
        self.file.close()

    def print_byte(self, value):
        if -0x80 < value < 0 : value += 0x100
        assert value >= 0 and value <= 0xFF
        self.file.write("\\b" + str(value) + " ")

    def print_bytex(self, value, pretty_print = None):
        if pretty_print != None:
            self.file.write(pretty_print + " ")
            return
        if -0x80 < value < 0: value += 0x100
        assert value >= 0 and value <= 0xFF
        self.file.write(to_hex(value, 2) + " ")

    def print_word(self, value):
        if -0x8000 < value < 0: value += 0x10000
        assert value >= 0 and value <= 0xFFFF
        self.file.write("\\w" + str(value) + " ")

    def print_wordx(self, value):
        if -0x8000 < value < 0: value += 0x10000
        assert value >= 0 and value <= 0xFFFF
        self.file.write("\\wx" + to_hex(value, 4) + " ")

    def print_dword(self, value):
        if -0x80000000 < value < 0: value += 0x100000000
        assert value >= 0 and value <= 0xFFFFFFFF
        self.file.write("\\d" + str(value) + " ")

    def print_dwordx(self, value):
        if -0x80000000 < value < 0: value += 0x100000000
        assert value >= 0 and value <= 0xFFFFFFFF
        self.file.write("\\dx" + to_hex(value, 8) + " ")

    def print_varx(self, value, size):
        if size == 1:
            self.print_bytex(value)
        elif size == 2:
            self.print_wordx(value)
        elif size == 3:
            self.print_bytex(0xFF)
            self.print_wordx(value)
        elif size == 4:
            self.print_dwordx(value)
        else:
            assert False

    def print_string(self, value, final_zero = True, force_ascii = False):
        self.file.write('"')
        if not force_ascii: self.file.write(u'Ãž')
        self.file.write(value)
        self.file.write('" ')
        if final_zero: self.file.write('00 ')

    def print_decimal(self, value, size = None):
        self.file.write(str(value) + " ")

    def print_sprite_size(self, size):
        self.print_decimal(size)

    def newline(self):
        self.file.write("\n")

    def next_sprite(self, is_real_sprite):
        self.print_decimal(self.sprite_num, 2)
        if not is_real_sprite: self.file.write("* ")
        self.sprite_num += 1

    def print_sprite(self, filename, sprite_info):
        self.file.write(filename + " ")
        self.print_decimal(sprite_info.xpos.value)
        self.print_decimal(sprite_info.ypos.value)
        self.print_bytex(sprite_info.compression.value)
        self.print_decimal(sprite_info.ysize.value)
        self.print_decimal(sprite_info.xsize.value)
        self.print_decimal(sprite_info.xrel.value)
        self.print_decimal(sprite_info.yrel.value)

    def print_empty_realsprite(self):
        self.file.write("* 1 0")
